import { bookDb } from '@/entities/bookDb';
import { IBlockInstanceSceneLink } from '@/entities/BookEntities';
import { generateUUID } from '@/utils/UUIDUtils';
import { useDialog } from "@/providers/DialogProvider/DialogProvider";

export function useInstanceScenesMutations() {
    const { showDialog } = useDialog();

    const linkSceneToInstance = async (
        blockInstanceUuid: string,
        blockUuid: string | undefined, // blockUuid of the instance, passed from component
        sceneId: number
    ): Promise<IBlockInstanceSceneLink | null> => {
        if (!blockUuid) {
            console.error("blockUuid is missing, cannot link scene.");
            // Or throw new Error("blockUuid is required to link a scene.");
            return null;
        }
        const newLink: IBlockInstanceSceneLink = {
            uuid: generateUUID(), // Main UUID for the link record itself
            blockInstanceUuid,
            blockUuid, // Storing blockUuid on the link table
            sceneId,
            // 'id' will be auto-generated by Dexie if it's the primary key ++id
        };
        try {
            const newLinkId = await bookDb.blockInstanceSceneLinks.add(newLink);
            // If 'id' is the auto-incrementing primary key, Dexie returns it.
            // Return the full link object, potentially with the auto-generated id.
            return { ...newLink, id: newLinkId as number };
        } catch (error) {
            console.error("Failed to link scene:", error);
            // Handle or rethrow error as appropriate for your app's error strategy
            return null;
        }
    };

    const unlinkSceneFromInstance = async (linkId: number | undefined): Promise<boolean> => {
        if (linkId === undefined) {
            console.error("Link ID is undefined, cannot unlink scene.");
            return false;
        }

        const confirm = await showDialog("Подтверждение", "Удалить привязку к сцене?");
        if (!confirm) return false;

        try {
            await bookDb.blockInstanceSceneLinks.delete(linkId);
            return true;
        } catch (error) {
            console.error("Failed to unlink scene:", error);
            return false;
        }
    };

    return {
        linkSceneToInstance,
        unlinkSceneFromInstance,
    };
}
